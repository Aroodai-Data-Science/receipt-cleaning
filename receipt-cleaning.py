# -*- coding: utf-8 -*-
"""Master File and Sales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/193R2cfdW6Oy2yEiQCtMKsU-CSyNo-uLc

# Cleaning of Sales and Product Masterfile Data

Notebook by Dominic Dayta, for Aroodai and Lean Retail Labs.
"""

import pandas as pd
import numpy as np

"""I need this function for later, to check if a given string is a float or not."""

def is_number(n):
    try:
        float(n)   # Type-casting the string to `float`.
                   # If string is not a valid `float`, 
                   # it'll raise `ValueError` exception
    except ValueError:
        return False
    return True

"""## Product Masterfile

This one is much more straightforward to clean.
"""

product_master = pd.read_excel (r'/content/drive/MyDrive/Colab Notebooks/Data Files/SALES/ALL 2017 Product Nov rows21536 Havaianas Masterfile (Jaime No Blanks 1) Nov 2017 with notes.xlsx',)

product_master.head()

"""## Receipt Reports

This one is much more complicated. First I'll load the full table, no column names, and then separate transaction details and item details, to be cross-identified with the receipt number as key.
"""

sales_raw = pd.read_excel (r'/content/drive/MyDrive/Colab Notebooks/Data Files/SALES/DOM 2017 Sales Apr 2082rows Copy of Sales Report by Receipt with Item Details with notes.xlsx',
                              skiprows = 12, header=None)

sales_raw.head()

sales_transactions = pd.DataFrame()
sales_items = pd.DataFrame()

i = 0
receipt = ''
item_num = 0

while i < len(sales_raw):
  this_row = sales_raw.loc[i,:].copy(deep = True)
  num_items = this_row[3]

  if(is_number(num_items)):
    receipt = this_row[0]
    item_num = 0
    sales_transactions = sales_transactions.append(this_row, ignore_index = True)
  else:
    item_num = item_num + 1
    this_row[0] = receipt
    this_row[7] = item_num
    sales_items = sales_items.append(this_row, ignore_index = True)

  i = i + 1

sales_transactions.columns = ['receipt','date','store','quantity','type','amount_no_gst','amount_with_gst','amount_total','gender_age','unnamed']
sales_transactions = sales_transactions.drop(['unnamed'], axis = 1)
sales_transactions.head()

sales_items.columns = ['receipt', 'item_no','barcode','brand','style','color','size','item_num','item_quantity','total']
sales_items.head()

"""## POS Flags

Cleaning this takes the same process.
"""

flags_raw = pd.read_excel (r'/content/drive/MyDrive/Colab Notebooks/Data Files/SALES/DOM 2017 Sales Apr Ion  rows2081 Copy of POS Flags (Gender and Age) with Purchase Item Details with notes.xlsx',
                              skiprows = 12, header=None)

flags_transactions = pd.DataFrame()
flags_items = pd.DataFrame()

i = 0
receipt = ''
item_num = 0

while i < len(flags_raw):
  this_row = flags_raw.loc[i,:].copy(deep = True)
  num_items = this_row[5]

  if(is_number(num_items)):
    receipt = this_row[1]
    item_num = 0
    flags_transactions = flags_transactions.append(this_row, ignore_index = True)
  else:
    item_num = item_num + 1
    this_row[0] = receipt
    this_row[10] = item_num
    flags_items = flags_items.append(this_row, ignore_index = True)

  i = i + 1

flags_transactions.columns = ['store','receipt','date','time','total','quantity','know_how','gender_age','often_buy','unnamed']
flags_transactions = flags_transactions.drop(['unnamed'], axis = 1)
flags_transactions.head()

flags_items.columns = ['receipt','color_code','size','style','item_quantity','color','group','season','brand','srp','item_num']
flags_items.head()

"""# Combine Contents

It's much more useful to consider the transactions and items data together for both flags and sales sets.
"""

sales = sales_transactions.merge(sales_items, left_on='receipt', right_on='receipt')
flags = flags_transactions.merge(flags_items, left_on='receipt', right_on='receipt')

sales.head()

flags.head()

"""I also want to produce a combined dataset called `sales` that combines information from both datasets.


"""

receipts = flags.loc[:,['receipt','item_num','time','know_how','often_buy','color','color_code','style','group','season','brand','srp']].merge(
    sales, left_on=['receipt','item_num','color'], right_on=['receipt','item_num','color']
)

receipts.head()

receipts.to_excel(r'/content/drive/MyDrive/Colab Notebooks/Data Files/Cleaned/receipts.xls', index=False)

